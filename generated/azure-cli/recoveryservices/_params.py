# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# pylint: disable=line-too-long

from knack.arguments import CLIArgumentType


def load_arguments(self, _):

    from azure.cli.core.commands.parameters import tags_type
    from azure.cli.core.commands.validators import get_default_location_from_resource_group

    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationalertsetting create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='The name of the email notification(alert) configuration.')
        c.argument('properties', id_part=None, help='The properties of a configure alert request.')
        c.argument('send_to_owners', id_part=None, help='A value indicating whether to send email to subscription administrator.')
        c.argument('custom_email_addresses', id_part=None, help='The custom email address for sending emails.')
        c.argument('locale', id_part=None, help='The locale for the email notification.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationalertsetting list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationalertsetting show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='The name of the email notification(alert) configuration.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Name of the ASR fabric.')
        c.argument('properties', id_part=None, help='Fabric creation input.')
        c.argument('custom_details', id_part=None, help='Fabric provider specific creation input.')
        c.argument('friendly_name', id_part=None, help='Friendly name of the fabric.')
        c.argument('encryption_details', id_part=None, help='Encryption details for the fabric.')
        c.argument('rollover_encryption_details', id_part=None, help='Rollover encryption details for the fabric.')
        c.argument('internal_identifier', id_part=None, help='Dra Registration Id.')
        c.argument('bcdr_state', id_part=None, help='BCDR state of the fabric.')
        c.argument('health_error_details', id_part=None, help='Fabric health error details.')
        c.argument('health', id_part=None, help='Health of fabric.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Name of the ASR fabric.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Name of the ASR fabric.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationnetwork replicationnetworkmapping create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Primary fabric name.')
        c.argument('network_name', id_part=None, help='Primary network name.')
        c.argument('name', id_part=None, help='Network mapping name.')
        c.argument('properties', id_part=None, help='Input properties for creating network mapping.')
        c.argument('recovery_fabric_name', id_part=None, help='Recovery fabric Name.')
        c.argument('recovery_network_id', id_part=None, help='Recovery network Id.')
        c.argument('fabric_specific_details', id_part=None, help='Fabric specific input properties.')
        c.argument('state', id_part=None, help='The pairing state for network mapping.')
        c.argument('primary_network_friendly_name', id_part=None, help='The primary network friendly name.')
        c.argument('primary_network_id', id_part=None, help='The primary network id for network mapping.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The primary fabric friendly name.')
        c.argument('recovery_network_friendly_name', id_part=None, help='The recovery network friendly name.')
        c.argument('recovery_fabric_arm_id', id_part=None, help='The recovery fabric ARM id.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The recovery fabric friendly name.')
        c.argument('fabric_specific_settings', id_part=None, help='The fabric specific settings.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationnetwork replicationnetworkmapping update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Primary fabric name.')
        c.argument('network_name', id_part=None, help='Primary network name.')
        c.argument('name', id_part=None, help='Network mapping name.')
        c.argument('properties', id_part=None, help='Input properties for creating network mapping.')
        c.argument('recovery_fabric_name', id_part=None, help='Recovery fabric Name.')
        c.argument('recovery_network_id', id_part=None, help='Recovery network Id.')
        c.argument('fabric_specific_details', id_part=None, help='Fabric specific input properties.')
        c.argument('state', id_part=None, help='The pairing state for network mapping.')
        c.argument('primary_network_friendly_name', id_part=None, help='The primary network friendly name.')
        c.argument('primary_network_id', id_part=None, help='The primary network id for network mapping.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The primary fabric friendly name.')
        c.argument('recovery_network_friendly_name', id_part=None, help='The recovery network friendly name.')
        c.argument('recovery_fabric_arm_id', id_part=None, help='The recovery fabric ARM id.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The recovery fabric friendly name.')
        c.argument('fabric_specific_settings', id_part=None, help='The fabric specific settings.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationnetwork replicationnetworkmapping delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Primary fabric name.')
        c.argument('network_name', id_part=None, help='Primary network name.')
        c.argument('name', id_part=None, help='Network mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationnetwork replicationnetworkmapping list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Primary fabric name.')
        c.argument('network_name', id_part=None, help='Primary network name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationnetwork replicationnetworkmapping show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Primary fabric name.')
        c.argument('network_name', id_part=None, help='Primary network name.')
        c.argument('name', id_part=None, help='Network mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Unique fabric ARM name.')
        c.argument('name', id_part=None, help='Unique protection container ARM name.')
        c.argument('properties', id_part=None, help='Create protection container input properties.')
        c.argument('provider_specific_input', id_part=None, help='Provider specific inputs for container creation.')
        c.argument('fabric_friendly_name', id_part=None, help='Fabric friendly name.')
        c.argument('friendly_name', id_part=None, help='The name.')
        c.argument('fabric_type', id_part=None, help='The fabric type.')
        c.argument('protected_item_count', id_part=None, help='Number of protected PEs')
        c.argument('pairing_status', id_part=None, help='The pairing status of this cloud.')
        c.argument('role', id_part=None, help='The role of this cloud.')
        c.argument('fabric_specific_details', id_part=None, help='Fabric specific details.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Unique fabric ARM name.')
        c.argument('name', id_part=None, help='Unique protection container ARM name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Unique fabric ARM name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Unique fabric ARM name.')
        c.argument('name', id_part=None, help='Unique protection container ARM name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationmigrationitem create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Migration item name.')
        c.argument('properties', id_part=None, help='Enable migration input properties.')
        c.argument('policy_id', id_part=None, help='The policy Id.')
        c.argument('provider_specific_details', id_part=None, help='The provider specific details.')
        c.argument('machine_name', id_part=None, help='The on-premise virtual machine name.')
        c.argument('policy_friendly_name', id_part=None, help='The name of policy governing this item.')
        c.argument('recovery_services_provider_id', id_part=None, help='The recovery services provider ARM Id.')
        c.argument('migration_state', id_part=None, help='The migration status.')
        c.argument('migration_state_description', id_part=None, help='The migration state description.')
        c.argument('test_migrate_state', id_part=None, help='The test migrate state.')
        c.argument('test_migrate_state_description', id_part=None, help='The test migrate state description.')
        c.argument('health', id_part=None, help='The consolidated health.')
        c.argument('health_errors', id_part=None, help='The list of health errors.')
        c.argument('allowed_operations', id_part=None, help='The allowed operations on the migration item, based on the current migration state of the item.')
        c.argument('current_job', id_part=None, help='The current job details.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationmigrationitem update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Migration item name.')
        c.argument('properties', id_part=None, help='Enable migration input properties.')
        c.argument('policy_id', id_part=None, help='The policy Id.')
        c.argument('provider_specific_details', id_part=None, help='The provider specific details.')
        c.argument('machine_name', id_part=None, help='The on-premise virtual machine name.')
        c.argument('policy_friendly_name', id_part=None, help='The name of policy governing this item.')
        c.argument('recovery_services_provider_id', id_part=None, help='The recovery services provider ARM Id.')
        c.argument('migration_state', id_part=None, help='The migration status.')
        c.argument('migration_state_description', id_part=None, help='The migration state description.')
        c.argument('test_migrate_state', id_part=None, help='The test migrate state.')
        c.argument('test_migrate_state_description', id_part=None, help='The test migrate state description.')
        c.argument('health', id_part=None, help='The consolidated health.')
        c.argument('health_errors', id_part=None, help='The list of health errors.')
        c.argument('allowed_operations', id_part=None, help='The allowed operations on the migration item, based on the current migration state of the item.')
        c.argument('current_job', id_part=None, help='The current job details.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationmigrationitem delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Migration item name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationmigrationitem list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationmigrationitem show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Migration item name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotecteditem create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Name of the fabric.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='A name for the replication protected item.')
        c.argument('properties', id_part=None, help='Enable protection input properties.')
        c.argument('policy_id', id_part=None, help='The Policy Id.')
        c.argument('protectable_item_id', id_part=None, help='The protectable item Id.')
        c.argument('provider_specific_details', id_part=None, help='The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.')
        c.argument('friendly_name', id_part=None, help='The name.')
        c.argument('protected_item_type', id_part=None, help='The type of protected item type.')
        c.argument('recovery_services_provider_id', id_part=None, help='The recovery provider ARM Id.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The friendly name of the primary fabric.')
        c.argument('primary_fabric_provider', id_part=None, help='The fabric provider of the primary fabric.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The friendly name of recovery fabric.')
        c.argument('recovery_fabric_id', id_part=None, help='The Arm Id of recovery fabric.')
        c.argument('primary_protection_container_friendly_name', id_part=None, help='The name of primary protection container friendly name.')
        c.argument('recovery_protection_container_friendly_name', id_part=None, help='The name of recovery container friendly name.')
        c.argument('protection_state', id_part=None, help='The protection status.')
        c.argument('protection_state_description', id_part=None, help='The protection state description.')
        c.argument('active_location', id_part=None, help='The Current active location of the PE.')
        c.argument('test_failover_state', id_part=None, help='The Test failover state.')
        c.argument('test_failover_state_description', id_part=None, help='The Test failover state description.')
        c.argument('allowed_operations', id_part=None, help='The allowed operations on the Replication protected item.')
        c.argument('replication_health', id_part=None, help='The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM\'s replication group into account. This is a string representation of the ProtectionHealth enumeration.')
        c.argument('failover_health', id_part=None, help='The consolidated failover health for the VM.')
        c.argument('health_errors', id_part=None, help='List of health errors.')
        c.argument('policy_friendly_name', id_part=None, help='The name of Policy governing this PE.')
        c.argument('last_successful_failover_time', id_part=None, help='The Last successful failover time.')
        c.argument('last_successful_test_failover_time', id_part=None, help='The Last successful test failover time.')
        c.argument('current_scenario', id_part=None, help='The current scenario.')
        c.argument('failover_recovery_point_id', id_part=None, help='The recovery point ARM Id to which the Vm was failed over.')
        c.argument('recovery_container_id', id_part=None, help='The recovery container Id.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotecteditem update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Name of the fabric.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='A name for the replication protected item.')
        c.argument('properties', id_part=None, help='Enable protection input properties.')
        c.argument('policy_id', id_part=None, help='The Policy Id.')
        c.argument('protectable_item_id', id_part=None, help='The protectable item Id.')
        c.argument('provider_specific_details', id_part=None, help='The ReplicationProviderInput. For HyperVReplicaAzure provider, it will be AzureEnableProtectionInput object. For San provider, it will be SanEnableProtectionInput object. For HyperVReplicaAzure provider, it can be null.')
        c.argument('friendly_name', id_part=None, help='The name.')
        c.argument('protected_item_type', id_part=None, help='The type of protected item type.')
        c.argument('recovery_services_provider_id', id_part=None, help='The recovery provider ARM Id.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The friendly name of the primary fabric.')
        c.argument('primary_fabric_provider', id_part=None, help='The fabric provider of the primary fabric.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The friendly name of recovery fabric.')
        c.argument('recovery_fabric_id', id_part=None, help='The Arm Id of recovery fabric.')
        c.argument('primary_protection_container_friendly_name', id_part=None, help='The name of primary protection container friendly name.')
        c.argument('recovery_protection_container_friendly_name', id_part=None, help='The name of recovery container friendly name.')
        c.argument('protection_state', id_part=None, help='The protection status.')
        c.argument('protection_state_description', id_part=None, help='The protection state description.')
        c.argument('active_location', id_part=None, help='The Current active location of the PE.')
        c.argument('test_failover_state', id_part=None, help='The Test failover state.')
        c.argument('test_failover_state_description', id_part=None, help='The Test failover state description.')
        c.argument('allowed_operations', id_part=None, help='The allowed operations on the Replication protected item.')
        c.argument('replication_health', id_part=None, help='The consolidated protection health for the VM taking any issues with SRS as well as all the replication units associated with the VM\'s replication group into account. This is a string representation of the ProtectionHealth enumeration.')
        c.argument('failover_health', id_part=None, help='The consolidated failover health for the VM.')
        c.argument('health_errors', id_part=None, help='List of health errors.')
        c.argument('policy_friendly_name', id_part=None, help='The name of Policy governing this PE.')
        c.argument('last_successful_failover_time', id_part=None, help='The Last successful failover time.')
        c.argument('last_successful_test_failover_time', id_part=None, help='The Last successful test failover time.')
        c.argument('current_scenario', id_part=None, help='The current scenario.')
        c.argument('failover_recovery_point_id', id_part=None, help='The recovery point ARM Id to which the Vm was failed over.')
        c.argument('recovery_container_id', id_part=None, help='The recovery container Id.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotecteditem delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Name of the fabric.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='A name for the replication protected item.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotecteditem list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Name of the fabric.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotecteditem show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Name of the fabric.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='A name for the replication protected item.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotectioncontainermapping create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Protection container mapping name.')
        c.argument('properties', id_part=None, help='Configure protection input properties.')
        c.argument('target_protection_container_id', id_part=None, help='The target unique protection container name.')
        c.argument('policy_id', id_part=None, help='Applicable policy.')
        c.argument('provider_specific_input', id_part=None, help='Provider specific input for pairing.')
        c.argument('target_protection_container_friendly_name', id_part=None, help='Friendly name of paired container.')
        c.argument('provider_specific_details', id_part=None, help='Provider specific provider details.')
        c.argument('health', id_part=None, help='Health of pairing.')
        c.argument('health_error_details', id_part=None, help='Health error.')
        c.argument('state', id_part=None, help='Association Status')
        c.argument('source_protection_container_friendly_name', id_part=None, help='Friendly name of source protection container.')
        c.argument('source_fabric_friendly_name', id_part=None, help='Friendly name of source fabric.')
        c.argument('target_fabric_friendly_name', id_part=None, help='Friendly name of target fabric.')
        c.argument('policy_friendly_name', id_part=None, help='Friendly name of replication policy.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotectioncontainermapping update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Protection container mapping name.')
        c.argument('properties', id_part=None, help='Configure protection input properties.')
        c.argument('target_protection_container_id', id_part=None, help='The target unique protection container name.')
        c.argument('policy_id', id_part=None, help='Applicable policy.')
        c.argument('provider_specific_input', id_part=None, help='Provider specific input for pairing.')
        c.argument('target_protection_container_friendly_name', id_part=None, help='Friendly name of paired container.')
        c.argument('provider_specific_details', id_part=None, help='Provider specific provider details.')
        c.argument('health', id_part=None, help='Health of pairing.')
        c.argument('health_error_details', id_part=None, help='Health error.')
        c.argument('state', id_part=None, help='Association Status')
        c.argument('source_protection_container_friendly_name', id_part=None, help='Friendly name of source protection container.')
        c.argument('source_fabric_friendly_name', id_part=None, help='Friendly name of source fabric.')
        c.argument('target_fabric_friendly_name', id_part=None, help='Friendly name of target fabric.')
        c.argument('policy_friendly_name', id_part=None, help='Friendly name of replication policy.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotectioncontainermapping delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Protection container mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotectioncontainermapping list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationprotectioncontainer replicationprotectioncontainermapping show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('protection_container_name', id_part=None, help='Protection container name.')
        c.argument('name', id_part=None, help='Protection container mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationrecoveryservicesprovider create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='Recovery services provider name.')
        c.argument('properties', id_part=None, help='The properties of an add provider request.')
        c.argument('machine_name', id_part=None, help='The name of the machine where the provider is getting added.')
        c.argument('authentication_identity_input', id_part=None, help='The identity provider input for DRA authentication.')
        c.argument('resource_access_identity_input', id_part=None, help='The identity provider input for resource access.')
        c.argument('fabric_type', id_part=None, help='Type of the site.')
        c.argument('friendly_name', id_part=None, help='Friendly name of the DRA.')
        c.argument('provider_version', id_part=None, help='The provider version.')
        c.argument('server_version', id_part=None, help='The fabric provider.')
        c.argument('provider_version_state', id_part=None, help='DRA version status.')
        c.argument('provider_version_expiry_date', id_part=None, help='Expiry date of the version.')
        c.argument('fabric_friendly_name', id_part=None, help='The fabric friendly name.')
        c.argument('last_heart_beat', id_part=None, help='Time when last heartbeat was sent by the DRA.')
        c.argument('connection_status', id_part=None, help='A value indicating whether DRA is responsive.')
        c.argument('protected_item_count', id_part=None, help='Number of protected VMs currently managed by the DRA.')
        c.argument('allowed_scenarios', id_part=None, help='The scenarios allowed on this provider.')
        c.argument('health_error_details', id_part=None, help='The recovery services provider health error details.')
        c.argument('dra_identifier', id_part=None, help='The DRA Id.')
        c.argument('authentication_identity_details', id_part=None, help='The authentication identity details.')
        c.argument('resource_access_identity_details', id_part=None, help='The resource access identity details.')
        c.argument('provider_version_details', id_part=None, help='The provider version details.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationrecoveryservicesprovider delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='Recovery services provider name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationrecoveryservicesprovider list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationrecoveryservicesprovider show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='Recovery services provider name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationstorageclassification replicationstorageclassificationmapping create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('storage_classification_name', id_part=None, help='Storage classification name.')
        c.argument('name', id_part=None, help='Storage classification mapping name.')
        c.argument('properties', id_part=None, help='Storage mapping input properties.')
        c.argument('target_storage_classification_id', id_part=None, help='The ID of the storage object.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationstorageclassification replicationstorageclassificationmapping delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('storage_classification_name', id_part=None, help='Storage classification name.')
        c.argument('name', id_part=None, help='Storage classification mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationstorageclassification replicationstorageclassificationmapping list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('storage_classification_name', id_part=None, help='Storage classification name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationstorageclassification replicationstorageclassificationmapping show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('storage_classification_name', id_part=None, help='Storage classification name.')
        c.argument('name', id_part=None, help='Storage classification mapping name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationvcenter create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='vCenter name.')
        c.argument('properties', id_part=None, help='The properties of an add vCenter request.')
        c.argument('friendly_name', id_part=None, help='The friendly name of the vCenter.')
        c.argument('ip_address', id_part=None, help='The IP address of the vCenter to be discovered.')
        c.argument('process_server_id', id_part=None, help='The process server Id from where the discovery is orchestrated.')
        c.argument('port', id_part=None, help='The port number for discovery.')
        c.argument('run_as_account_id', id_part=None, help='The account Id which has privileges to discover the vCenter.')
        c.argument('internal_id', id_part=None, help='VCenter internal ID.')
        c.argument('last_heartbeat', id_part=None, help='The time when the last heartbeat was received by vCenter.')
        c.argument('discovery_status', id_part=None, help='The VCenter discovery status.')
        c.argument('infrastructure_id', id_part=None, help='The infrastructure Id of vCenter.')
        c.argument('fabric_arm_resource_name', id_part=None, help='The ARM resource name of the fabric containing this VCenter.')
        c.argument('health_errors', id_part=None, help='The health errors for this VCenter.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationvcenter update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='vCenter name.')
        c.argument('properties', id_part=None, help='The properties of an add vCenter request.')
        c.argument('friendly_name', id_part=None, help='The friendly name of the vCenter.')
        c.argument('ip_address', id_part=None, help='The IP address of the vCenter to be discovered.')
        c.argument('process_server_id', id_part=None, help='The process server Id from where the discovery is orchestrated.')
        c.argument('port', id_part=None, help='The port number for discovery.')
        c.argument('run_as_account_id', id_part=None, help='The account Id which has privileges to discover the vCenter.')
        c.argument('internal_id', id_part=None, help='VCenter internal ID.')
        c.argument('last_heartbeat', id_part=None, help='The time when the last heartbeat was received by vCenter.')
        c.argument('discovery_status', id_part=None, help='The VCenter discovery status.')
        c.argument('infrastructure_id', id_part=None, help='The infrastructure Id of vCenter.')
        c.argument('fabric_arm_resource_name', id_part=None, help='The ARM resource name of the fabric containing this VCenter.')
        c.argument('health_errors', id_part=None, help='The health errors for this VCenter.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationvcenter delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='vCenter name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationvcenter list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationfabric replicationvcenter show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('fabric_name', id_part=None, help='Fabric name.')
        c.argument('name', id_part=None, help='vCenter name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationpolicy create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Replication policy name')
        c.argument('properties', id_part=None, help='Policy creation properties.')
        c.argument('provider_specific_input', id_part=None, help='The ReplicationProviderSettings.')
        c.argument('friendly_name', id_part=None, help='The FriendlyName.')
        c.argument('provider_specific_details', id_part=None, help='The ReplicationChannelSetting.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationpolicy update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Replication policy name')
        c.argument('properties', id_part=None, help='Policy creation properties.')
        c.argument('provider_specific_input', id_part=None, help='The ReplicationProviderSettings.')
        c.argument('friendly_name', id_part=None, help='The FriendlyName.')
        c.argument('provider_specific_details', id_part=None, help='The ReplicationChannelSetting.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationpolicy delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Replication policy name')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationpolicy list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationpolicy show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Replication policy name')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationrecoveryplan create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Recovery plan name.')
        c.argument('properties', id_part=None, help='Recovery plan creation properties.')
        c.argument('primary_fabric_id', id_part=None, help='The primary fabric Id.')
        c.argument('recovery_fabric_id', id_part=None, help='The recovery fabric Id.')
        c.argument('failover_deployment_model', id_part=None, help='The failover deployment model.')
        c.argument('groups', id_part=None, help='The recovery plan groups.')
        c.argument('friendly_name', id_part=None, help='The friendly name.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The primary fabric friendly name.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The recovery fabric friendly name.')
        c.argument('replication_providers', id_part=None, help='The list of replication providers.')
        c.argument('allowed_operations', id_part=None, help='The list of allowed operations.')
        c.argument('last_planned_failover_time', id_part=None, help='The start time of the last planned failover.')
        c.argument('last_unplanned_failover_time', id_part=None, help='The start time of the last unplanned failover.')
        c.argument('last_test_failover_time', id_part=None, help='The start time of the last test failover.')
        c.argument('current_scenario', id_part=None, help='The current scenario details.')
        c.argument('current_scenario_status', id_part=None, help='The recovery plan status.')
        c.argument('current_scenario_status_description', id_part=None, help='The recovery plan status description.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationrecoveryplan update') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Recovery plan name.')
        c.argument('properties', id_part=None, help='Recovery plan creation properties.')
        c.argument('primary_fabric_id', id_part=None, help='The primary fabric Id.')
        c.argument('recovery_fabric_id', id_part=None, help='The recovery fabric Id.')
        c.argument('failover_deployment_model', id_part=None, help='The failover deployment model.')
        c.argument('groups', id_part=None, help='The recovery plan groups.')
        c.argument('friendly_name', id_part=None, help='The friendly name.')
        c.argument('primary_fabric_friendly_name', id_part=None, help='The primary fabric friendly name.')
        c.argument('recovery_fabric_friendly_name', id_part=None, help='The recovery fabric friendly name.')
        c.argument('replication_providers', id_part=None, help='The list of replication providers.')
        c.argument('allowed_operations', id_part=None, help='The list of allowed operations.')
        c.argument('last_planned_failover_time', id_part=None, help='The start time of the last planned failover.')
        c.argument('last_unplanned_failover_time', id_part=None, help='The start time of the last unplanned failover.')
        c.argument('last_test_failover_time', id_part=None, help='The start time of the last test failover.')
        c.argument('current_scenario', id_part=None, help='The current scenario details.')
        c.argument('current_scenario_status', id_part=None, help='The recovery plan status.')
        c.argument('current_scenario_status_description', id_part=None, help='The recovery plan status description.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationrecoveryplan delete') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Recovery plan name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationrecoveryplan list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationrecoveryplan show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Recovery plan name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    name_arg_type = CLIArgumentType(options_list=('--name', '-n'), metavar='NAME')


    with self.argument_context('recoveryservices resourcegroup vault replicationvaultsetting create') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Vault setting name.')
        c.argument('properties', id_part=None, help='Vault setting creation input properties.')
        c.argument('migration_solution_id', id_part=None, help='The migration solution Id.')
        c.argument('id', id_part=None, help='Resource Id')
        c.argument('type', id_part=None, help='Resource Type')
        c.argument('location', id_part=None, help='Resource Location')
        c.argument('resource_id', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationvaultsetting list') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)

    with self.argument_context('recoveryservices resourcegroup vault replicationvaultsetting show') as c:
        c.argument('resource_name', id_part=None, help='The name of the recovery services vault.')
        c.argument('resource_group', id_part=None, help='The name of the resource group where the recovery services vault is present.')
        c.argument('name', id_part=None, help='Vault setting name.')
        c.argument('resource_id', name_arg_type, id_part=None)
        c.argument('rest_body', name_arg_type, id_part=None)
    apimanagement_name_type = CLIArgumentType(options_list='--apimanagement-name-name', help='Name of the Apimanagement.', id_part='name')

    with self.argument_context('apimanagement') as c:
        c.argument('tags', tags_type)
        c.argument('location', validator=get_default_location_from_resource_group)
        c.argument('apimanagement_name', name_arg_type, options_list=['--name', '-n'])